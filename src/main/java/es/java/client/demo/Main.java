/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package es.java.client.demo;

import org.apache.http.HttpHost;

import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
import org.elasticsearch.action.support.master.AcknowledgedResponse;
import org.elasticsearch.client.indices.CreateIndexRequest;
import org.elasticsearch.client.indices.CreateIndexResponse;

import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.action.get.GetRequest;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.builder.SearchSourceBuilder;

import java.io.IOException;
import java.lang.Thread;
import java.util.Map;
import java.util.HashMap;


public class Main {
    static String INDEX = "blogs";
    //https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-getting-started-initialization.html
    static RestClientBuilder restClientBuilder = RestClient.builder(
            new HttpHost("localhost", 9200, "http"),
            new HttpHost("localhost", 9201, "http"));

    public static void main(String[] args) {
        deleteIndex();

        createIndex();

        String docID1 = "1";
        Map<String, String> doc1 = new HashMap();
        doc1.put("title", "タイトル1");
        doc1.put("body", "てすとボディ1");

        index(docID1, doc1);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        searchAll();

        Map<String, String> updatedDoc1 = new HashMap();
        updatedDoc1.put("body", "updated てすとボディ111");

        update(docID1, updatedDoc1);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        searchAll();

        String docID2 = "2";
        Map<String, String> doc2 = new HashMap();
        doc2.put("title", "upserted タイトル2");
        doc2.put("body", "upserted てすとボディ2");

        upsert(docID2, doc2);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        searchAll();

        get();
    }

    //https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-create-index.html
    public static void createIndex() {
        System.out.println("### Create Index Request");

        Map<String, Object> message = new HashMap<>();
        message.put("type", "text");

        Map<String, Object> properties = new HashMap<>();
        properties.put("title", message);
        properties.put("body", message);

        Map<String, Object> mapping = new HashMap<>();
        mapping.put("properties", properties);

        CreateIndexRequest indexRequest = new CreateIndexRequest(INDEX);
        indexRequest.mapping(mapping);

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            CreateIndexResponse indexResponse = esClient.indices().create(indexRequest, RequestOptions.DEFAULT);
            esClient.close();

            System.out.println("created index res: " + indexResponse);
            System.out.println("index: " + indexResponse.index());
            System.out.println("");
        } catch (Exception e) {

        }
    }

    public static void deleteIndex() {
        System.out.println("### Delete Index Request");

        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(INDEX);

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            AcknowledgedResponse acknowledgedResponse = esClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);
            esClient.close();

            System.out.println("acknowledged res: " + acknowledgedResponse.isAcknowledged());
            System.out.println("");
        } catch (Exception e) {

        }
    }

    public static void index(String docID, Map<String, String> doc) {
        System.out.println("### Index Request");

        IndexRequest indexRequest = new IndexRequest(INDEX);
        indexRequest.source(doc, XContentType.JSON);
        indexRequest.id(docID);

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            IndexResponse response = esClient.index(indexRequest, RequestOptions.DEFAULT);
            esClient.close();

            System.out.println("indexed req: " + indexRequest);
            System.out.println("indexed res: " + response);
            System.out.println("");
        } catch (Exception e) {

        }
    }

    // https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html
    public static void update(String docID, Map<String, String> doc) {
        System.out.println("### Update Request");

        Map<String, String> doc2 = new HashMap();
        doc2.put("title", "tsttst");
        doc2.put("body", "tsttst body");

        UpdateRequest updateRequest = new UpdateRequest(INDEX, docID);
        updateRequest.doc(doc2, XContentType.JSON);

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            UpdateResponse response = esClient.update(updateRequest, RequestOptions.DEFAULT);
            esClient.close();

            System.out.println("updated req: " + updateRequest);
            System.out.println("updated res: " + response);
            System.out.println("");
        } catch (Exception e) {

        }
    }

    public static void upsert(String docID, Map<String, String> doc) {
        System.out.println("### Upsert Request");

        IndexRequest indexRequest = new IndexRequest(INDEX);
        indexRequest.source(doc, XContentType.JSON);
        indexRequest.id(docID);

        UpdateRequest updateRequest = new UpdateRequest(INDEX, docID);
        updateRequest.upsert(indexRequest);
        updateRequest.doc(doc, XContentType.JSON);

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            UpdateResponse response = esClient.update(updateRequest, RequestOptions.DEFAULT);
            esClient.close();

            System.out.println("upserted req: " + updateRequest);
            System.out.println("upserted res: " + response);
            System.out.println("");
        } catch (Exception e) {

        }
    }

    public static void get() {
        System.out.println("### Get Request");

        GetRequest getRequest = new GetRequest(INDEX, "1");

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            GetResponse response = esClient.get(getRequest, RequestOptions.DEFAULT);
            esClient.close();

            System.out.println("got req: " + getRequest);
            System.out.println("got res: " + response);
            System.out.println("");
        } catch (Exception e) {

        }
    }

    public static void searchAll() {
        System.out.println("### Search All Request");

        SearchRequest searchRequest = new SearchRequest(INDEX);
        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
        searchSourceBuilder.query(QueryBuilders.matchAllQuery());
        searchRequest.source(searchSourceBuilder);

        RestHighLevelClient esClient = new RestHighLevelClient(restClientBuilder);
        try {
            SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT);
            esClient.close();

            SearchHit[] results = response.getHits().getHits();
            System.out.println("Total Hit Num : " + results.length);
            for (SearchHit hit : results) {
                System.out.println("#" + hit.getIndex() + ": id="+ hit.getId());
                System.out.println("- score : " + hit.getScore());

                Map sourceAsMap = hit.getSourceAsMap();
                System.out.println("- title : " + sourceAsMap.get("title"));
                System.out.println("- body : " + sourceAsMap.get("body"));
            }
            System.out.println("");
        } catch (Exception e) {

        }
    }
}